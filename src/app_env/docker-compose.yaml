version: "3"

services:
  registry:
    image: registry:2
    restart: always
    volumes:
      - registry:/var/lib/registry
    ports:
      - "5000:5000"
    networks:
      - mlsystemdesign22net

  k3s-server:
    restart: always
    image: "rancher/k3s:v1.25.3-k3s1"
    command: server
    tmpfs:
      - /run
      - /var/run
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    privileged: true
    environment:
      - K3S_TOKEN=1668278241204
      - K3S_KUBECONFIG_OUTPUT=/output/kubeconfig.yaml
      - K3S_KUBECONFIG_MODE=666
    volumes:
      - ./_k3s/kubeconfig.yaml:/output/kubeconfig.yaml
      - ./_k3s/registries.yaml:/etc/rancher/k3s/registries.yaml:ro
    ports:
      - "6443:6443"
      - "80:80"
      - "443:443"
    networks:
      - mlsystemdesign22net

  k3s-agent:
    image: "rancher/k3s:v1.25.3-k3s1"
    tmpfs:
      - /run
      - /var/run
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    privileged: true
    restart: always
    volumes:
      - ./_k3s/registries.yaml:/etc/rancher/k3s/registries.yaml:ro
    environment:
      - K3S_URL=https://k3s-server:6443
      - K3S_TOKEN=1668278241204
    networks:
      - mlsystemdesign22net

  minio:
    restart: always
    image: quay.io/minio/minio:RELEASE.2022-10-08T20-11-00Z
    command: server /data --console-address ":9001"
    volumes:
      - minio-storage:/data
    environment:
      MINIO_ROOT_USER: "miniouser"
      MINIO_ROOT_PASSWORD: "miniopassword"
    networks:
      - mlsystemdesign22net
    ports:
      - "9000:9000"
      - "9001:9001"

  minio-init-bucket:
    restart: on-failure
    build:
      dockerfile: Dockerfile
      context: init_bucket/
    volumes:
      - minio-init-bucket:/opt/minio-init-bucket
    networks:
      - mlsystemdesign22net
    depends_on:
      - minio
    environment:
      S3_ENDPOINT: "http://minio:9000"
      S3_USER: "miniouser"
      S3_PASSWORD: "miniopassword"
      S3_BUCKET: "mlsystemdesign22"

  mlflow:
    restart: always
    build:
      context: mlflow
      dockerfile: Dockerfile
    networks:
      - mlsystemdesign22net
    ports:
      - "5500:5500"
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: miniouser
      AWS_SECRET_ACCESS_KEY: miniopassword
      DB_USER: postgres
      DB_PASS: postgres
      DB_HOST: mlflow-db
      DB_PORT: 5432
      DB_NAME: postgres
      S3_BUCKET: mlsystemdesign22
      S3_BUCKET_PREFIX: mlflow

  mlflow-db:
    image: postgres:13.2-alpine
    restart: always
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    networks:
      - mlsystemdesign22net
    logging:
      options:
        max-size: 10m

  airflow:
    build:
      dockerfile: Dockerfile
      context: airflow
    restart: always
    networks:
      - mlsystemdesign22net
    ports:
      - "8080:8080"
    volumes:
      - ./_k3s/kubeconfig.yaml:/root/.kube/config:ro
      - ./airflow_dags/airflow_train_score.py:/root/airflow/dags/airflow_train_score.py:ro
      - ./airflow_dags/airflow_deploy.py:/root/airflow/dags/airflow_deploy.py:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
    environment:
      NODE_IP: ${NODE_IP}
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: "1"
      SECRET_S3_ENDPOINT: 'http://${NODE_IP}:9000'
      SECRET_S3_ACCESS_TOKEN: 'miniouser'
      SECRET_S3_SECRET_TOKEN: 'miniopassword'
      SECRET_S3_BUCKET: 'mlsystemdesign22'
      ENDPOINT_MLFLOW_TRACKING_URL_EXTERNAL_URL: 'http://${NODE_IP}:5500'
      ENDPOINT_MLFLOW_TRACKING_URL_INNER_URL: 'http://${NODE_IP}:5500'
      ENDPOINT_IMAGE_REGISTRY: 'registry:5000/'
      KUBE_NAMESPACE: 'default'
      KUBE_CONFIG_FILE: '/root/.kube/config'
      KUBE_CLUSTER_CONTEXT: 'default'
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
      REDIS_HOST: ${NODE_IP}
      REDIS_PORT: 6379
      REDIS_QUEUE: queue:in_images
      REDIS_USERNAME: ''
      REDIS_PASSWORD: ''

    command: airflow standalone

  init-images:
    restart: on-failure
    build:
      dockerfile: Dockerfile
      context: init_images/
    networks:
      - mlsystemdesign22net
    volumes:
      - ../app_model:/opt/app_model:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
    depends_on:
      - registry


volumes:
  minio-storage:
  minio-init-bucket:
  registry:

networks:
  mlsystemdesign22net:
