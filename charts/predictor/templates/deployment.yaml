apiVersion: apps/v1
kind: Deployment
metadata:
  name: predictor
  labels:
    app: predictor
spec:
  replicas: {{.Values.replicas}}
  strategy:
    type: {{.Values.updateStrategy}}
  selector:
    matchLabels:
      app: predictor
  template:
    metadata:
      labels:
        app: predictor
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
    spec:
      restartPolicy: {{.Values.restartPolicy }}
      {{- if .Values.imagePullSecrets.secretName }}
      imagePullSecrets:
        - name: {{.Values.imagePullSecrets.secretName}}
      {{- end }}
      volumes:
        - name: predictor-tmp
          emptyDir: { }
      containers:
        - name: predictor
          image: '{{.Values.image.registry}}{{.Values.image.repository}}:{{.Values.image.tag}}'
          imagePullPolicy: {{.Values.imagePullPolicy}}
          envFrom:
            - configMapRef:
                name: predictor-config
          volumeMounts:
            - mountPath: /tmp
              name: predictor-tmp
          ports:
            - containerPort: 8000
          startupProbe:
            httpGet:
              path: /prometheus
              port: 8000
            initialDelaySeconds: 1
            periodSeconds: 1
            failureThreshold: 60
          readinessProbe:
            httpGet:
              path: /prometheus
              port: 8000
          livenessProbe:
            httpGet:
              path: /prometheus
              port: 8000
